{"version":3,"sources":["images/bg1.jpg","components/Display/index.js","components/DisplayDate/index.js","components/Todo/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FA","require","Display","props","console","log","backgroundColor","color","Math","floor","random","length","className","style","item","name","onClick","handleDelete","id","DisplayDate","state","currentDate","moment","Date","format","day","this","Component","Todo","todoItem","list","loadData","allList","localStorage","getItem","setState","JSON","parse","handleInputChange","event","target","value","handleSubmit","preventDefault","todoArr","push","setItem","stringify","todosInProgress","filter","width","class","type","onChange","map","key","App","Style","row","backgroundImage","bg","backgroundSize","backgroundPosition","backgroundRepeat","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a8c59a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg1.780db145.jpg\";","import React from \"react\";\r\nconst FA = require(\"react-fontawesome\");\r\n\r\nfunction Display(props) {\r\n    console.log(props);\r\n    const backgroundColor = [\"69A0FF\", \"#d64161\", \"#D469FF\", \"#FFEE75\", \"#FFEFB5\", \"#463B80\"];\r\n    var randomColor = Math.floor(Math.random() * backgroundColor.length);\r\n    const color = backgroundColor[randomColor];\r\n\r\n    return (\r\n        <div className=\"shadow-lg p-3 mb-5 rounded\" style={{backgroundColor: color}}>\r\n                <h1>{props.item} <FA name=\"check\" className=\"check\" onClick={props.handleDelete} id={props.id} /></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;\r\n","import React, {Component} from \"react\";\r\nimport moment from \"moment\";\r\n\r\nclass DisplayDate extends Component {\r\n    state = {\r\n        currentDate: moment(new Date()).format(\"YYYY-MM-DD\"),\r\n        day: moment(new Date()).format(\"dddd\")\r\n       };\r\n\r\n    render() { \r\n        const Style={\r\n            header: {\r\n                backgroundColor: \"black\"\r\n            }\r\n        }\r\n    return(\r\n        <div>\r\n            <h1 className=\"header text-light\" style={Style.header}>{this.state.currentDate} {this.state.day}</h1>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default DisplayDate;","import React, { Component } from \"react\";\r\nimport Display from \"../Display\";\r\nimport DisplayDate from \"../DisplayDate\";\r\nconst FA = require(\"react-fontawesome\");\r\n\r\nclass Todo extends Component {\r\n\r\n    state = {\r\n        todoItem: \"\",\r\n        list: [\"Feed the baby\"]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n\r\n    loadData = () => {\r\n        let allList = localStorage.getItem(\"todo\");\r\n        if (allList)\r\n            this.setState({\r\n                list: JSON.parse(allList)\r\n            })\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        console.log(event.target);\r\n        let todoArr = [];\r\n        todoArr.push(...this.state.list);\r\n        todoArr.push(this.state.todoItem);\r\n        localStorage.setItem(\"todo\", JSON.stringify(todoArr));\r\n        this.setState({\r\n            todoItem: \"\"\r\n        })\r\n        this.loadData();\r\n    }\r\n\r\n    handleDelete = event => {\r\n        event.preventDefault();\r\n        console.log(event.target.id);\r\n        let todosInProgress = this.state.list.filter(item => {\r\n            return item != event.target.id\r\n        })\r\n        localStorage.setItem(\"todo\", JSON.stringify(todosInProgress));\r\n\r\n        this.setState({\r\n            list: todosInProgress\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const Style = {\r\n            submit: {\r\n                \"width\": \"80px\",\r\n                \"height\": \"80px\",\r\n                \"line-height\": \"80px\",\r\n                \"border\": \"2px solid #f5f5f5\",\r\n                \"border-radius\": \"50%\",\r\n                \"color\": \"#f5f5f5\",\r\n                \"text-align\": \"center\",\r\n                \"text-decoration\": \"none\",\r\n                \"background\": \"#555777\",\r\n                \"box-shadow\": \"0 0 3px gray\",\r\n                \"font-size\": \"20px\",\r\n                \"font-weight\": \"bold\"\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-2\"></div>\r\n                <div className=\"col-md-8\">\r\n                    <br></br><br></br><br></br><br></br><br></br>\r\n                    <div className=\"card shadow-lg p-3 mb-5 bg-info rounded col-lg-8 d-flex align-items-stretch\" style={{ width: \"500px\" }}>\r\n                        <div class=\"card-title text-center\">\r\n                            <DisplayDate />\r\n                        </div>\r\n                        <input className=\"shadow-lg p-3 mb-5 bg-white rounded\" type=\"text\" name=\"todoItem\" value={this.state.todoItem} onChange={this.handleInputChange}></input>\r\n                        {this.state.list.map(item => (\r\n                            <Display\r\n                                key={item}\r\n                                id={item}\r\n                                item={item}\r\n                                handleDelete={this.handleDelete}\r\n                            />\r\n                        ))}\r\n                        <div className=\"text-center\">\r\n                            <button className=\"text-center\" type=\"submit\" onClick={this.handleSubmit} className=\"submit\" style={Style.submit}>\r\n                                <FA name=\"plus\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-2\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;","import React from \"react\";\nimport Todo from \"./components/Todo\";\n// import Background from \"./components/Background\";\nimport bg from \"./images/bg1.jpg\"\n\nfunction App() {\n  const Style = {\n    row: {\n      backgroundImage: 'url(' + bg + ')',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center center',\n      backgroundRepeat: 'no-repeat',\n      height: \"1000px\"\n    }\n  }\n\n  return (\n    <div className=\"row\" style={Style.row}>\n      <div className=\"col-md-2\"></div>\n      <div className=\"col-md-8\">\n        <Todo />\n      </div>\n      <div className=\"col-md-2\"></div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}